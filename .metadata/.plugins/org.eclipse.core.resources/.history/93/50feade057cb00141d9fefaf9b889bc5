
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include "hw_memmap.h"
#include "sysctl.h"
#include "gpio.h"
#include <../../../bsw/mcal/cfg/pin.h>
#include <../../../bsw/mcal/driverlib/adc.h>
#include <../../../bsw/srv/lcd/lcd.h>
#include <../../../bsw/srv/pll/pll.h>
#include <../../../bsw/srv/systick/systick.h>
#include <../../../bsw/srv/adm/adm.h>

#define rgb_port		GPIO_PORTF_BASE
#define rgb_led_red		GPIO_PIN_1
#define rgb_led_blue	GPIO_PIN_2
#define rgb_led_green	GPIO_PIN_3
#define sw_port			GPIO_PORTF_BASE
#define sw_left			GPIO_PIN_4
#define sw_right		GPIO_PIN_0

typedef enum
{ Bit_RESET = 0,
  Bit_SET
}BitAction;

unsigned long cpu_freq;

int main (void){

	uint32_t switch_counter = 0;
	float	temp;
	char c[20];
	pll_init();
	systick_init();

	  set_cpu_freq(3,1);         // 50 MHz
	  cpu_freq = get_cpu_freq();

	  lcd_init();
	  delay_ms(1000);

	  lcd_puts("Alberto");
	  lcd_goto(2,2);
	  lcd_puts("Marqueses");
	  PortFunctionInit();

	  delay_ms(500);
      lcd_clear();

      adm_configuration();


      while(1)
    {
		if(!GPIOPinRead (sw_port,sw_right)){

        // Output low level
			GPIOPinWrite(rgb_port, rgb_led_red,~rgb_led_red);
			switch_counter++;
		}
		else{
        // Output high level
            GPIOPinWrite(rgb_port, rgb_led_red,rgb_led_red);

		}

		delay_ms(100);

		lcd_goto(1,1);
		sprintf(c, "%u", adc_sequencer[1]);
		lcd_puts(c);

		//lcd_goto(2,1);
		//temp = 2.7 - ((adc_sequencer[0] + 55) / 4095);
		//sprintf(c, "%f", temp);
		//lcd_puts(c);





    }


return (0);
}
